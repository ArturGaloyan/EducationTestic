@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

<link rel="stylesheet" href="~/css/Director/SchoolClasses.css" />


<div class="edu-container" id="DirectorSchollClasses">

    <div class="NewEducationEmpti h-auto py-3">
        <h1 class="h1 h-auto py-5">{{ls.tr('schoolClasses')}}&nbsp;</h1> <!--&nbsp sa tuyl e talis prabel dnel "html simbols" ejic e vercvac-->
    </div>

    <!-- modal kanchelu button -->
    <div class="containerFirstModal">

        <h1 class="firstModal" v-if="classes.length == 0">No classes in the school add your first class</h1>

        <div class="button-container">
            <!--   <button class="button add" v-on:click="">{{ls.tr('add')}}</button>    -->
            <button class="button add" v-on:click="openClassModal()">{{ls.tr('add')}}</button>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="classModal" tabindex="-3" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document" style="min-width: fit-content">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel" v-if="activeClass.id == null">{{ls.tr('addClass')}}</h5>
                    <h5 class="modal-title" id="exampleModalLabel" v-else>{{ls.tr('editClass')}}</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">


                    <div class="containerSelection d-flex align-items-center">
                        <!--Select Class-->
                        <div class="edu-sel containerClass">
                            <select class="edu-select" name="" id="OptSelectClass" v-model="activeClass.classNumber">
                                <option value="1">{{ls.tr('class')}} 1</option>
                                <option value="2">{{ls.tr('class')}} 2</option>
                                <option value="3">{{ls.tr('class')}} 3</option>
                                <option value="4">{{ls.tr('class')}} 4</option>
                                <option value="5">{{ls.tr('class')}} 5</option>
                                <option value="6">{{ls.tr('class')}} 6</option>
                                <option value="7">{{ls.tr('class')}} 7</option>
                                <option value="8">{{ls.tr('class')}} 8</option>
                                <option value="9">{{ls.tr('class')}} 9</option>
                                <option value="10">{{ls.tr('class')}} 10</option>
                                <option value="11">{{ls.tr('class')}} 11</option>
                                <option value="12">{{ls.tr('class')}} 12</option>
                            </select>
                        </div>
                        <div class="edu-sel containerClass">
                            <select class="edu-select" name="classGroup" id="OptSelectClassGroup" v-model="activeClass.classGroup">
                                <option value="">{{ls.tr('selectGroup')}}</option>
                                <option v-for="cg in classGroups" v-bind:value="cg">{{ls.tr('group')}} {{cg}}</option>
                            </select>
                        </div>
                        <!--Select Teacher-->
                        <div class="edu-sel containerTeacher">
                            <select class="edu-select" name="" id="OptSelectTeacher" v-model="activeClass.teacherID">
                                <option v-bind:value="null" disabled>{{ls.tr('selectTeacher')}}</option>
                                <option v-for="t in teachers" v-bind:value="t.id">{{t.surname}} {{t.name}}</option>
                            </select>
                        </div>

                    </div>


                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">{{ls.tr('close')}}</button>
                    <button type="button" class="btn btn-primary" v-on:click="saveClass()" v-bind:disabled="isSaveDisabled()">{{ activeClass.id == null ? ls.tr('save') : ls.tr('update') }}</button>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="edu-select-teacher d-flex justify-content-between align-items-center px-3" name="" v-for="cl in classes">
            <span>{{ls.tr('class')}} {{cl.classNumber}}</span>
            <span>{{cl.classGroup}}</span>
            <span>{{cl.teacher.surname}} {{cl.teacher.name}}</span>
            <span>
                <button class="p-2 bd-highlight btn btn-warning" v-on:click="editClass(cl.id)">{{ls.tr('change')}}</button>
                <button class="p-2 bd-highlight btn btn-danger" v-on:click="deleteClass(cl.id)">{{ls.tr('delete')}}</button>
            </span>
        </div>
    </div>

   

    <!--buttons-->
    @*<div class="button-container">
            <button class="button add" v-on:click="openClassModal()">{{ls.tr('add')}}</button>
            <button class="button change" v-on:click="editClass(0)">&#9998; {{ls.tr('change')}}</button>
            <button class="button delete" v-on:click="deleteClass(0)">{{ls.tr('delete')}}</button>
        </div>*@

    <!--Selection-->
    <!--


         <template v-if="testings != null">
        <div class="testings-result text-white d-flex justify-content-center" v-if="testings.length > 0">
            <table border="1">
                <tr>
                    <th class="text-center px-2 py-1">{{ls.tr('testingDate')}}</th>
                    <th class="text-center px-2 py-1">{{ls.tr('paragraph')}}</th>
                    <th class="text-center px-2 py-1">{{ls.tr('description')}}</th>
                    <th></th>
                </tr>
                <tr v-for="t in testings">
                    <td class="text-center px-2 py-1">{{t.testing.testingDate}}</td>
                    <td class="text-center px-2 py-1">{{t.testEdu.paragraph}}</td>
                    <td class="text-center px-2 py-1">{{t.testing.description}}</td>

                    <td class="text-center px-2 py-1">
                        <button v-on:click="goToFinishPage(t.testing.id)">{{ls.tr('see')}}</button>

                    </td>
                </tr>
            </table>
        </div>
        <div v-else>
            <h3 class="text-center text-white">{{ls.tr('noResults')}}</h3>
        </div>
    </template>

     <template v-else>
        <h3 class="text-center text-white">{{ls.tr('selectClassAndSubject')}}</h3>
     </template>

        -->


</div>
<script src="~/js/subjects.js" asp-append-version="true"></script> @*// stanal dproci bolor ararkaner@@ sharac @@st dasaranneri*@
<script src="~/js/classGroups.js" asp-append-version="true"></script>
<script>

    // nor edu lracnelu vuejs n e;

    var app = new Vue({
        el: "#DirectorSchollClasses",
        data: {
            classSubjects: subjects.classSubjects, //
            activeClass: {
                id: null,
                classNumber: '1',
                classGroup: '',
                teacherID: null,
                schoolID: null,
            },
            classGroups: classGroups.groups,
            //paragraph: '',
            teachers: [],
            classes: [],
            sharedState: langStore.state,
            ls: langStore,

            //isEduStarted: 0,
            //testEdusID: null,
        },
        methods: {
            goToFinishPage: function (testingID) {
                document.location = `/Director/Finish/${testingID}`;
            },

            saveClass: function () {

                if (this.activeClass.id == null) {
                    // insertClass
                    axios({
                        method: 'post',
                        url: '/Director/AddClass',
                        params: {
                            classNumber: this.activeClass.classNumber,
                            classGroup: this.activeClass.classGroup,
                            teacherID: this.activeClass.teacherID,
                        },
                    }).then((r) => {
                        console.log(r.data);
                        let cl = r.data;
                        let tch = this.teachers.find((t) => { return t.id = cl.teacherID });
                        cl.teacher = { ...tch };
                        this.classes.push(cl);
                        this.sortClasses();
                        this.closeModal();
                    });
                } else {
                    // updateClass
                    axios({
                        method: 'post',
                        url: '/Director/UpdateClass',
                        params: { ...this.activeClass },
                    }).then((r) => {
                        console.log(r.data);

                        let i = this.classes.findIndex((item) => { return item.id == r.data.id });

                        if (i > -1) {
                            let tch = this.teachers.find((t) => { return t.id = r.data.teacherID });

                            this.classes[i] = { ...r.data };

                            this.classes[i].teacher = { ...tch};
                            this.sortClasses();

                        }

                        this.closeModal();
                    });
                }

            },

            setDefaultModal: function () {
                this.activeClass = {
                    id: null,
                    classNumber: '1',
                    classGroup: '',
                    teacherID: null,
                    schoolID: null,
                };
            },

            openClassModal: function () {
                this.setDefaultModal();
                $('#classModal').modal('show');
            },
            editClass: function (classId) {
                let cl = this.classes.find((item) => { return item.id == classId });
                if (!!cl) {
                    this.activeClass = {...cl};
                    $('#classModal').modal('show');
                } else {
                    alert('selected class not found');
                }
               
            },
            deleteClass: function (classId) {
                let cl = this.classes.find((item) => { return item.id == classId });
                let confirmed = confirm(this.ls.tr('classDeleteConfirm').replace('%classNumber%', cl.classNumber).replace('%classGroup%', cl.classGroup));
                //let confirmed = confirm(`Are you sure to delete ${cl.classNumber} ${cl.classGroup} class`);

                if (confirmed) {
                    if (!!cl) {
                        axios({
                            method: 'post',
                            url: '/Director/DeleteClass',
                            params: { ...cl },
                        }).then((r) => {
                            console.log(r.data);

                            let i = this.classes.findIndex((item) => { return item.id == r.data.id });


                            if (i > -1) {
                                this.classes.splice(i, 1);

                                this.sortClasses();
                            }

                            this.closeModal();
                        });
                    }
                }

            },

            sortClasses: function () {
                this.classes.sort((a, b) => {
                    if (Number(a.classNumber) < Number(b.classNumber)) {
                        return -1;
                    }
                    if (Number(a.classNumber) > Number(b.classNumber)) {
                        return 1;
                    }

                    if (a.classGroup < b.classGroup) {
                        return -1;
                    }

                    if (a.classGroup > b.classGroup) {
                        return 1;
                    }

                    return 0;
                })
            },
            closeModal: function () {
                $('#classModal').modal('hide');
                this.setDefaultModal();
            },
            isSaveDisabled: function () {

                if (this.activeClass.teacherID == null) {
                    return true;
                }

                if (this.activeClass.classGroup == '') {
                    return true;
                }

                return false;
            }

        },

        async created() {
            axios({
                method: 'post',
                url: '/Director/GetClassesInfo',
            }).then((r) => {
                console.log(r);
                console.log(r.data);
                this.teachers = [...r.data.teachers];

                this.teachers.sort((a, b) => {
                    if (a.surname < b.surname) {
                        return -1;
                    }
                    if (a.surname > b.surname) {
                        return 1;
                    }

                    if (a.name < b.name) {
                        return -1;
                    }
                    if (a.name > b.name) {
                        return 1;
                    }

                    return 0;
                })

                this.classes = r.data.classes.map((cl) => {
                    let c = { ...cl };

                    let tch = r.data.teachers.find((t) => { return t.id = cl.teacherID });

                    c.teacher = { ...tch };

                    return c;
                });
                this.sortClasses();
            });
        }

    });

</script>