@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
   // Teacher EDU
}
<link rel="stylesheet" href="~/css/Teacher/Edu.css" />

<div class="edu-container" id="question-container">
    <div class="edu-card">
        <div id="rendBox" v-if="testEdu != null">
            <span id="All-password">{{ testEdu.password }}</span>
        </div>
        <div class="inner-box py-3">
            <h1 class="h1">{{subjects.subjects.find((item) => item.id == testEdu.subjectID)?.name}}</h1>
            <h2 class="text-white">{{testEdu.paragraph}}</h2>
        </div>

        <div class="d-flex justify-content-center align-items-center mt-3">
            <div class="edu-select text-white h4 mb-0" v-bind:class="{'py-0 mr-3': !orderStart}">
                <span>{{ls.tr('class')}} {{testEdu.classNumber}}</span>
                <span v-if="orderStart">{{classGroup}}</span>
            </div>
            <select class="edu-select" name="classGroup" id="OptSelectClass" v-model="classGroup" v-if="!orderStart">
                <option value='' disabled>{{ls.tr('selectGroup')}}</option>
                <option v-for="cg in classGroups" v-bind:value="cg">{{ls.tr('group')}} {{cg}}</option>
            </select>
        </div>

        <div v-if="currentQuestion != null">
            <div id="timeDown" name="timer">{{ timeText }}</div>
            <div class="text-warning text-center h3" v-bind:class="{'d-none': trueAnswer!=null}">{{ls.tr('questionNumber')}} {{currentQuestionIndex + 1 }}</div>
            <div class="question" name="question">{{ currentQuestion.question }}</div>
            <div class="answer-bloc">
                <div class="answers w-100 " v-bind:class="{'align-items-center': trueAnswer!=null}">

                    <span class="answer-item" v-for="(a, i) in currentQuestion.answers"
                          v-bind:class="[{'bg-success w-100 h-75': trueAnswer == i }, {'d-none': trueAnswer!=null && trueAnswer != i }]">{{ a.value }}</span>

                </div>
            </div>
        </div>
        <button v-on:click="startTestEdu()" class="next" v-if="currentQuestion == null && !!testEdu && classGroup != '' && !isFinished">{{ls.tr('start')}}</button>
        <button v-on:click="goToFinishPage()" class="next w-auto" v-if="isFinished">{{ls.tr('seeTestResults')}}</button>

        
    </div>
</div>

<script src="~/js/subjects.js" asp-append-version="true"></script> @*// stanal dproci bolor ararkaner@@ sharac @@st dasaranneri*@
<script src="~/js/classGroups.js" asp-append-version="true"></script>
<script>
    //timer and test
    var app = new Vue({
        el: "#question-container",
        data: {
            timer: 80,
            time: 120,
            timeText: '',
            timerInterval: 0,
            teacherID: null,
            id: null,
            classGroup: '',
            classGroups: classGroups.groups,
           /* classGroupIsOk: false,*/

            orderStart: false,

            currentQuestion: null,
            currentQuestionIndex: null,

            trueAnswer: null,

            // stanum e eduPassword
            testEdu: null,

            tests: [

            ],
            isFinished: false,
            ls: langStore,
        },
        methods: {
            Start: function () {
                this.currentQuestion = this.tests[0];
                this.currentQuestionIndex = 0;
                clearInterval(this.timerInterval);
                this.timer = this.currentQuestion.timer;
                this.startTimer();
            },
            startTimer: function () {
                this.time = this.timer;
                let self = this;
                this.timerInterval = setInterval(function () {
                    self.time = self.time - 1;
                    let s = self.time % 60;
                    let m = (self.time - s) / 60;
                    if (s < 10)
                        s = '0' + s;
                    if (m < 10)
                        m = '0' + m;
                    self.timeText = `${m}:${s}`;
                    if (self.time <= 0) {
                        clearInterval(self.timerInterval);
                        self.nextQuestion();
                    }
                }, 1000);
            },
            nextQuestion: function () {
                let self = this;
                setTimeout(function () {
                    self.showTrueAnswer();
                    setTimeout(function () {
                        self.trueAnswer = null;
                        self.currentQuestionIndex += 1;
                       // if (self.currentQuestionIndex >= self.tests.length) {
                        if (self.currentQuestionIndex >= self.tests.length) {
                            self.finishEdu();
                        } else {
                            self.currentQuestion = self.tests[self.currentQuestionIndex];
                            self.timer = self.currentQuestion.timer;
                            self.startTimer();
                        }
                    }, 7000);
                }, 3000);

            },
            showTrueAnswer: function () {
                this.trueAnswer = this.currentQuestion.trueAnswer;
                console.log(this.trueAnswer);
            },
            eduPassword: function () {
                axios({
                    method: 'get',
                    url: '/Teacher/SelectEduPassword',
                    params: {
                        id: this.id
                    }
                }).then((r) => {
                    console.log(r, r.data);
                    this.testEdu = r.data;
                });
            },
            //sksum e edun
            startTestEdu: function () {
                self = this;
                axios({
                    mehtod: 'post',
                    url: '/Teacher/OrderStartEdu',
                    params: {
                        id: this.id,
                        classGroup: this.classGroup,
                    }
                }).then((r) => {
                    if (r.data == true) {
                        this.orderStart = r.data;
                        self.Start();
                    }
                });
            },
            finishEdu: function () {
                //finish test
                console.log('finish');
                axios({
                    method: 'post',
                    url: '/Teacher/CleanEduPassword/',
                    params: {
                        id: this.testEdu.id
                    }
                }).then((r) => {
                    this.currentQuestion = null;
                    this.isFinished = true;
                });

                @* window.location.href = "@Url.Action("Index", "StudentsFinish")";*@
                //document.location = `/Teacher/Finish/${this.id}`;
            },
            goToFinishPage: function () {
                document.location = `/Teacher/Finish/${this.id}`;
            }
        },
        created: function () {
            this.id = window.location.pathname.split('/')[3];
            //this.startTimer();
            this.eduPassword();
            //this.startTestEdu();

            // axios.get("/posts/getmyposts")
            //     .then(r => {
            //         console.log(r.data)
            //         this.photos = r.data;
            //     })
            axios({
                method: 'get',
                url: '/Teacher/SelectEduQuestions',
                params: {
                    id: this.id
                }
            }).then((r) => {
                console.log(r, r.data);
                //this.tests = r.data;
                this.tests = r.data.map((q) => {
                    console.log(q);
                    return {
                        question: q.question,
                        trueAnswer: q.trueAnswer,
                        timer: q.timer,
                        point: q.point,
                        answers: [
                            { value: q.answer1 },
                            { value: q.answer2 },
                            { value: q.answer3 },
                            { value: q.answer4 }
                        ]
                    };
                });


            });
        }

    });



</script>
