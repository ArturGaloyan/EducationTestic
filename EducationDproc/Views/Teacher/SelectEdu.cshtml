@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

<link rel="stylesheet" href="~/css/Teacher/SelectEdu.css" />


<div class="edu-container flex-column align-items-center" id="TeacherSelectEdu">
    <div class="NewEducationEmpti py-3 px-4">
        <h1 class="h1">{{ls.tr('teacherName')}}</h1>
        <h2 class="h2">{{ls.tr('selectEducations')}}</h2>
    </div>
    <div class="containerSelection">
        <!--Select Class-->
        <div class="edu-sel containerClass">
            <select class="edu-select" name="" id="OptSelectClass" v-model="classNumber" v-on:change="GetEdus()">
                <option value="">{{ls.tr('selectClass')}}</option>
                <option value="1">{{ls.tr('class')}} 1</option>
                <option value="2">{{ls.tr('class')}} 2</option>
                <option value="3">{{ls.tr('class')}} 3</option>
                <option value="4">{{ls.tr('class')}} 4</option>
                <option value="5">{{ls.tr('class')}} 5</option>
                <option value="6">{{ls.tr('class')}} 6</option>
                <option value="7">{{ls.tr('class')}} 7</option>
                <option value="8">{{ls.tr('class')}} 8</option>
                <option value="9">{{ls.tr('class')}} 9</option>
                <option value="10">{{ls.tr('class')}} 10</option>
                <option value="11">{{ls.tr('class')}} 11</option>
                <option value="12">{{ls.tr('class')}} 12</option>
            </select>
        </div>
        <!--Select Item-->
        <div class="edu-sel containerItem">
            <select class="edu-select" name="" id="OptSelectItem" v-model="subjectID" v-on:change="GetEdus()">
                <option value="">{{ls.tr('selectItem')}}</option>
                <option v-for="s in classSubjects.find((item) => { return item.classNumber == classNumber })?.subjects" v-bind:value="s.id">{{s.name}}</option>
            </select>
        </div>
        <!--Select Paragraph-->
        <div class="edu-sel containerParagraph">
            <select class="edu-select" name="" id="OptSelectParagraph" v-model="paragraph">
                <option value="">{{ls.tr('selectParagraph')}}</option>
                <option v-for="edu in testEdus" v-bind:value="edu.id">{{edu.paragraph}} {{edu.cnt > 0 ? '' : '(new!)' }}</option>
            </select>
        </div>

        <!--buttons-->
        <div class="buttons">
            <button class="button new" onclick="document.location='/Teacher/NewEdu'" v-if="paragraph == ''">{{ls.tr('new')}}</button>
            <button class="button data" v-else v-on:click="startTestEdu()">{{ls.tr('start')}}</button>
            @*<button class="button data" v-bind:disabled="!paragraph" v-on:click="document.location=`/AuthorEduList/Index/${paragraph}`">EDIT</button>*@
        <button class="button data" v-if="!!paragraph" v-on:click="document.location=`/Teacher/EditEdu/${paragraph}`">{{ls.tr('browse')}}</button>



            @*if(data1.id == testing.testEduID)
                {
                // ete nman testing exel e apa chavelacnel    "miayn nael" Browse Start
                }
                else      New Edit STart
                {
                context.Testings.Add(testing); // avelacnum e nor Testings tox trvac tvyalnerov;
                }*@
            @*<button class="button data" v-bind:disabled="!paragraph" v-on:click="document.location=`/AuthorEduList/Index/${paragraph}`">EDIT</button>*@

            @*<button class="button start">START</button>*@
        </div>

    </div><!--Selection-->

</div>
<script src="~/js/subjects.js" asp-append-version="true"></script> @*// stanal dproci bolor ararkaner@@ sharac @@st dasaranneri*@
<script>

    // nor edu lracnelu vuejs n e;

    var app = new Vue({
        el: "#TeacherSelectEdu",
        data: {
            classSubjects: subjects.classSubjects, //
            classNumber: '',
            subjectID: '',
            paragraph: '',
            testEdus: [],
            sharedState: langStore.state,

            isEduStarted: 0,
            ls: langStore,
            //testEdusID: null,
        },
        methods: {
            GetEdus: function () {
                if (!!this.classNumber && !!this.subjectID) {
                    axios({
                        method: 'post',
                        url: '/Teacher/GetEdus',
                        params: {
                            classNumber: this.classNumber,
                            subjectID: this.subjectID,
                        }
                    }).then((r) => {
                        console.log(r);
                        console.log(r.data);
                        if (r.data == 'notLoggedIn') {
                            document.location = '/Teacher/SignupLogin';
                        } else {
                            this.testEdus = r.data;
                            this.isEduStarted = r.data.isEduStarted;
                        }
                    });
                }

            },
            startTestEdu: function () {
                axios({
                    method: 'get',
                    url: '/Teacher/CreateTestEduPassword',
                    params: {
                        id: this.paragraph
                    }
                }).then((response) => {
                    console.log(response.data);
                    document.location = `/Teacher/Edu/${response.data.testingID}`;
                });
            }
        },
        async created() {
        }

    });

</script>