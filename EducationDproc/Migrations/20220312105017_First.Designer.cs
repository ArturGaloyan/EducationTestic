// <auto-generated />
using System;
using EducationDproc.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationDproc.Migrations
{
    [DbContext(typeof(EduContext))]
    [Migration("20220312105017_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationDproc.Models.AnswerStudent", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("answer")
                        .HasColumnType("int");

                    b.Property<int>("isTrue")
                        .HasColumnType("int");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.Property<int>("questionID")
                        .HasColumnType("int");

                    b.Property<int>("studentID")
                        .HasColumnType("int");

                    b.Property<int>("testingID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("questionID");

                    b.HasIndex("studentID");

                    b.HasIndex("testingID");

                    b.ToTable("AnswerStudents");
                });

            modelBuilder.Entity("EducationDproc.Models.ClassNumberSubjects", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("classNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schoolID")
                        .HasColumnType("int");

                    b.Property<int>("subjectID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("schoolID");

                    b.HasIndex("subjectID");

                    b.ToTable("ClassNumberSubjects");
                });

            modelBuilder.Entity("EducationDproc.Models.ClassSubjectsTeachers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("classesID")
                        .HasColumnType("int");

                    b.Property<int>("schoolID")
                        .HasColumnType("int");

                    b.Property<int>("subjectID")
                        .HasColumnType("int");

                    b.Property<int>("teacherID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("classesID");

                    b.HasIndex("schoolID");

                    b.HasIndex("subjectID");

                    b.HasIndex("teacherID");

                    b.ToTable("ClassSubjectsTeachers");
                });

            modelBuilder.Entity("EducationDproc.Models.Classes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("classGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("classNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schoolID")
                        .HasColumnType("int");

                    b.Property<int>("teacherID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("schoolID");

                    b.HasIndex("teacherID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("EducationDproc.Models.Director", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("license_key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schoolID")
                        .HasColumnType("int");

                    b.Property<string>("surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("schoolID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("EducationDproc.Models.Question", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("answer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answer3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answer4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.Property<string>("question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("testEduID")
                        .HasColumnType("int");

                    b.Property<int>("timer")
                        .HasColumnType("int");

                    b.Property<string>("trueAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("testEduID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EducationDproc.Models.Schools", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("license_key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("EducationDproc.Models.Student", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EducationDproc.Models.Subjects", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schoolID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("schoolID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("EducationDproc.Models.Teacher", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("license_key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schoolID")
                        .HasColumnType("int");

                    b.Property<string>("surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("schoolID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("EducationDproc.Models.TestEdu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("classNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("isEduStarted")
                        .HasColumnType("int");

                    b.Property<string>("paragraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schoolID")
                        .HasColumnType("int");

                    b.Property<int>("subjectID")
                        .HasColumnType("int");

                    b.Property<int>("teacherID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("schoolID");

                    b.HasIndex("subjectID");

                    b.HasIndex("teacherID");

                    b.ToTable("TestEdus");
                });

            modelBuilder.Entity("EducationDproc.Models.Testing", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("classGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("schoolID")
                        .HasColumnType("int");

                    b.Property<int>("teacherID")
                        .HasColumnType("int");

                    b.Property<int>("testEduID")
                        .HasColumnType("int");

                    b.Property<DateTime>("testingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("schoolID");

                    b.HasIndex("teacherID");

                    b.HasIndex("testEduID");

                    b.ToTable("Testings");
                });

            modelBuilder.Entity("EducationDproc.Models.TestingResults", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("classGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("classNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("isFalseCount")
                        .HasColumnType("int");

                    b.Property<int>("isNoneCount")
                        .HasColumnType("int");

                    b.Property<int>("isTrueCount")
                        .HasColumnType("int");

                    b.Property<int>("maxPoint")
                        .HasColumnType("int");

                    b.Property<string>("paragraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("resultPoint")
                        .HasColumnType("int");

                    b.Property<int>("schoolID")
                        .HasColumnType("int");

                    b.Property<int>("studentID")
                        .HasColumnType("int");

                    b.Property<int>("subjectID")
                        .HasColumnType("int");

                    b.Property<int>("teacherID")
                        .HasColumnType("int");

                    b.Property<int>("testEduID")
                        .HasColumnType("int");

                    b.Property<DateTime>("testingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("testingID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("schoolID");

                    b.HasIndex("studentID");

                    b.HasIndex("subjectID");

                    b.HasIndex("teacherID");

                    b.HasIndex("testEduID");

                    b.HasIndex("testingID");

                    b.ToTable("TestingResults");
                });

            modelBuilder.Entity("EducationDproc.Models.AnswerStudent", b =>
                {
                    b.HasOne("EducationDproc.Models.Question", "question")
                        .WithMany()
                        .HasForeignKey("questionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Testing", "testing")
                        .WithMany()
                        .HasForeignKey("testingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationDproc.Models.ClassNumberSubjects", b =>
                {
                    b.HasOne("EducationDproc.Models.Schools", "school")
                        .WithMany()
                        .HasForeignKey("schoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Subjects", "subject")
                        .WithMany()
                        .HasForeignKey("subjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationDproc.Models.ClassSubjectsTeachers", b =>
                {
                    b.HasOne("EducationDproc.Models.Classes", "classes")
                        .WithMany()
                        .HasForeignKey("classesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Schools", "school")
                        .WithMany()
                        .HasForeignKey("schoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Subjects", "subject")
                        .WithMany()
                        .HasForeignKey("subjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationDproc.Models.Classes", b =>
                {
                    b.HasOne("EducationDproc.Models.Schools", "school")
                        .WithMany()
                        .HasForeignKey("schoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationDproc.Models.Director", b =>
                {
                    b.HasOne("EducationDproc.Models.Schools", "school")
                        .WithMany()
                        .HasForeignKey("schoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationDproc.Models.Question", b =>
                {
                    b.HasOne("EducationDproc.Models.TestEdu", "testEdu")
                        .WithMany()
                        .HasForeignKey("testEduID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationDproc.Models.Subjects", b =>
                {
                    b.HasOne("EducationDproc.Models.Schools", "school")
                        .WithMany()
                        .HasForeignKey("schoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationDproc.Models.Teacher", b =>
                {
                    b.HasOne("EducationDproc.Models.Schools", "school")
                        .WithMany()
                        .HasForeignKey("schoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationDproc.Models.TestEdu", b =>
                {
                    b.HasOne("EducationDproc.Models.Schools", "school")
                        .WithMany()
                        .HasForeignKey("schoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Subjects", "subject")
                        .WithMany()
                        .HasForeignKey("subjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationDproc.Models.Testing", b =>
                {
                    b.HasOne("EducationDproc.Models.Schools", "school")
                        .WithMany()
                        .HasForeignKey("schoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.TestEdu", "testEdu")
                        .WithMany()
                        .HasForeignKey("testEduID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationDproc.Models.TestingResults", b =>
                {
                    b.HasOne("EducationDproc.Models.Schools", "school")
                        .WithMany()
                        .HasForeignKey("schoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Subjects", "subject")
                        .WithMany()
                        .HasForeignKey("subjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.TestEdu", "testEdu")
                        .WithMany()
                        .HasForeignKey("testEduID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationDproc.Models.Testing", "testing")
                        .WithMany()
                        .HasForeignKey("testingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
